name: 1-node Kubernetes CentOS9
version: 2
formatVersion: 1
inputs:
  lb-ip-range:
    type: string
    title: IP-Range for Load Balancer
    description: IP-Range for load balancer in format x.x.x.x-y.y.y.y
  ip-assignment:
    type: string
    title: IP assignment
    oneOf:
      - title: static
        const: static
      - title: DHCP
        const: dynamic
resources:
  Kube:
    type: Cloud.Machine
    properties:
      image: CentOS9
      flavor: medium
      customizeGuestOs: false
      resourceName: ${self.resourceName}
      ipAddress: ${self.ipaddress}
      vmName: ${self.vmname}
      constraints:
        - tag: env:vsphere
      networks:
        - network: ${resource.kube-net.id}
          assignment: ${input.ip-assignment}
      cloudConfig: |
        #cloud-config
        repo_update: true
        repo_upgrade: all

        preserve_hostname: false
        hostname: ${self.resourceName}
        fqdn: ${(self.resourceName)+".vcc.vmw"}

        runcmd:
         - |
           if [[ "${input.ip-assignment}" = "static" ]]; then
             nmcli con add type ethernet con-name 'custom ens33' ifname ens33 ip4 ${self.networks[0].address}/${resource.kube-net.prefixLength} gw4 ${resource.kube-net.gateway}
             nmcli con mod 'custom ens33' ipv4.dns "${join(resource.kube-net.dns,' ')}"
             nmcli con mod 'custom ens33' ipv4.dns-search "${join(resource.kube-net.dnsSearchDomains,',')}"
             nmcli con down 'System ens33' ; nmcli con up 'custom ens33'
             nmcli con del 'System ens33'
             hostnamectl set-hostname --static `dig -x ${self.networks[0].address} +short | cut -d "." -f 1`
             hostnamectl set-hostname --pretty ${self.resourceName}
           fi
         - swapoff -a
         - sed -i '/swap/d' /etc/fstab
         - setenforce 0
         - sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config
         - sudo yum install -y yum-utils
         - sudo dnf -y install kernel-devel-$(uname -r)
         - sudo modprobe br_netfilter
         - sudo modprobe ip_vs
         - sudo modprobe ip_vs_rr
         - sudo modprobe ip_vs_wrr
         - sudo modprobe ip_vs_sh
         - sudo modprobe overlay
         - cat > /etc/modules-load.d/kubernetes.conf << EOF
         - br_netfilter
         - ip_vs
         - ip_vs_rr
         - ip_vs_wrr
         - ip_vs_sh
         - overlay
         - EOF
         - cat > /etc/sysctl.d/kubernetes.conf << EOF
         - net.ipv4.ip_forward = 1
         - net.bridge.bridge-nf-call-ip6tables = 1
         - net.bridge.bridge-nf-call-iptables = 1
         - EOF
         - sysctl --system
         - sudo dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
         - sudo dnf makecache
         - sudo dnf -y install containerd.io
         - sudo sh -c "containerd config default > /etc/containerd/config.toml" ; cat /etc/containerd/config.toml
         - sed -i 's/SystemdCgroup = false/SystemdCgroup =true/g' /etc/containerd/config.toml
         - sudo systemctl enable --now containerd.service
         - sudo systemctl disable firewalld --now
         - cat <<EOF > /etc/yum.repos.d/kubernetes.repo
         - "[kubernetes]"
         - name=Kubernetes
         - baseurl=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/
         - enabled=1
         - gpgcheck=1
         - repo_gpgcheck=1
         - gpgkey=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/repodata/repomd.xml.key
         - exclude=kubelet kubeadm kubectl cri-tools kubernetes-cni
         - EOF
         - dnf makecache; dnf install -y kubelet kubeadm kubectl --disableexcludes=kubernetes
         - systemctl enable --now kubelet.service
         - sudo kubeadm init --pod-network-cidr=10.244.0.0/16
         - mkdir -p $HOME/.kube
         - sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
         - sudo chown $(id -u):$(id -g) $HOME/.kube/config
         - mkdir -p /root/.kube
         - sudo cp -i /etc/kubernetes/admin.conf /root/.kube/config
         - sudo chown $(id -u):$(id -g) /root/.kube/config
         - kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
         - sudo kubectl taint nodes node-role.kubernetes.io/control-plane:NoSchedule- --all=true
         - sudo kubectl label nodes node.kubernetes.io/exclude-from-external-load-balancers- --all=true
         - kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.14.8/config/manifests/metallb-native.yaml
         - sleep 60
         - cat <<EOF > /tmp/metallb-config.yaml
         - "apiVersion: metallb.io/v1beta1"
         - "kind: IPAddressPool"
         - "metadata:"
         - "  namespace: metallb-system"
         - "  name: first-pool"
         - "spec:"
         - "  addresses: "
         - "  - ${input.lb-ip-range}"
         - "---"
         - "apiVersion: metallb.io/v1beta1"
         - "kind: L2Advertisement"
         - "metadata:"
         - "  name: example"
         - "  namespace: metallb-system"
         - EOF
         - kubectl apply -f /tmp/metallb-config.yaml
  kube-net:
    type: Cloud.Network
    properties:
      networkType: existing
      constraints:
        - tag: env:vsphere
